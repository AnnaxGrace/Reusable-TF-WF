name: Reusable Plan and Apply

on: 
    workflow_call:
        secrets:
            TF_vars:
                required: false
            AZURE_CLIENT_ID:
                required: true
            AZURE_TENANT_ID:
                required: true
            AZURE_SUBSCRIPTION_ID:
                required: true
        outputs:
            OUTPUTS_STRING:
                description: 'A string of all created outputs'
                value: ${{ jobs.run-tf.outputs.TERRAFORM_OUTPUTS }}


permissions:
    id-token: write
    contents: read

jobs:
  run-tf:
    runs-on: ubuntu-latest
    outputs:
        TERRAFORM_OUTPUTS: ${{ steps.terraform-apply.outputs.terraform_outputs }}

    steps: 

    - uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Create Terraform Secrets tfvars File'
      run: |
        touch secrets.tfvars
        cat > secrets.tfvars << EOF
        ${{ secrets.TF_vars }}
        EOF
      working-directory: terraform

    # - name: 'Test array'
    #   run: |
    #     text="here=there whee=were\w party=disco"
    #     IFS=' ' read -r -a test_array <<< "$text"
    #     echo "${test_array[@]}"
    #     for i in "${!test_array[@]}"; 
    #     do
    #         if [[ "${test_array[$i]}" == *"\\"* ]]; then
    #           echo "Its there!"
    #           anna=$(echo "${test_array[$i]}" | sed 's/\\/\\\\/g')
    #           echo "anna"
    #           echo $anna
    #           echo "one"
    #           echo "before single"
    #           echo ${test_array[$i]}
    #           echo "after single"
    #           test_array[$i]="$anna"
    #           echo ${test_array[$i]}
    #         fi
    #     done
    #     echo "array after"
    #     echo "${test_array[@]}"

    # - name: 'Test secrets.tfvars'
    #   run: |
    #     text=$(echo '${{ secrets.TF_vars }}' | sed 's/.*/"&"/' | paste -sd' ' -)
    #     echo "$text"
    #     # echo $text
    #     IFS=' ' read -r -a test_array <<< "$text"
    #     echo "${test_array[@]}"
    #     for i in "${!test_array[@]}"; 
    #     do
    #         if [[ "test_array[$i]" == *"\\"* ]]; then
    #           echo "Its there!"
    #           DOUBLE_ESCAPE_STRING=$(echo "${test_array[$i]}" | sed 's/\\/\\\\/g')
    #           test_array[$i]="$DOUBLE_ESCAPE_STRING"
    #         fi
    #     done
    #     var=$(printf "%s\n"  ${test_array[@]//\"/})
    #     # echo ${vector[index]//\"/}

    #     # var=$( IFS=$' '; echo "${test_array[*]}" )
    #     touch secrets.tfvars
    #     echo "var"
    #     echo $var
    #     cat > secrets.tfvars << EOF
    #     '${{ secrets.TF_vars }}'
    #     EOF
    #   working-directory: terraform


    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: secrets
    #     path: terraform/secrets.tfvars

    # - name: 'Plan Run'
    #   run: |
    #     terraform init
    #     # With secrets file
    #     # terraform plan -input=false -var-file=./secrets.tfvars
    #     # export ${{ secrets.TF_vars }}
    #     # with string
    #     terraform plan -input=false ${{ secrets.TF_vars }}
    #   working-directory: terraform
  

    - name: 'Apply Run'
      id: terraform-apply
      run: |
        terraform init
        terraform apply -auto-approve -input=false ${{ secrets.TF_vars }}
        terraform output -raw > file.txt
        # text=$(echo ./file.txt | sed 's/.*/"&"/' | paste -sd' ' -)
        whee=$(echo $(cat file.txt))
        echo "whee"
        echo $whee
        echo "here"
        text=$(grep pattern file.txt | tr '\n' ' ')
        echo $text
        echo "terraform_outputs=$whee" >> "$GITHUB_OUTPUT"
        # terraform destroy -auto-approve -input=false ${{ secrets.TF_vars }}      
      working-directory: terraform
      
    - name: 'Test output'
      run: |
       echo ${{ steps.terraform-apply.outputs.terraform_outputs }}


